// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscriptions.mut.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions(
    service_name,
    icon_url,
    username,
    email,
    enc_password,
    amount,
    currency,
    billing_cycle,
    memo,
    pls_delete,
    message,
    passer_id,
    trust_id,
    is_disclosed,
    custom_data
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, false, $14)
RETURNING id, service_name, icon_url, username, email, enc_password, amount, currency, billing_cycle, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type CreateSubscriptionParams struct {
	ServiceName  pgtype.Text
	IconUrl      pgtype.Text
	Username     string
	Email        string
	EncPassword  []byte
	Amount       int32
	Currency     string
	BillingCycle string
	Memo         string
	PlsDelete    bool
	Message      string
	PasserID     pgtype.UUID
	TrustID      int32
	CustomData   []byte
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, createSubscription,
		arg.ServiceName,
		arg.IconUrl,
		arg.Username,
		arg.Email,
		arg.EncPassword,
		arg.Amount,
		arg.Currency,
		arg.BillingCycle,
		arg.Memo,
		arg.PlsDelete,
		arg.Message,
		arg.PasserID,
		arg.TrustID,
		arg.CustomData,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.IconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Amount,
		&i.Currency,
		&i.BillingCycle,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :one
DELETE FROM subscriptions
WHERE id = $1 AND passer_id = $2
RETURNING id, service_name, icon_url, username, email, enc_password, amount, currency, billing_cycle, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type DeleteSubscriptionParams struct {
	ID       int32
	PasserID pgtype.UUID
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, deleteSubscription, arg.ID, arg.PasserID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.IconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Amount,
		&i.Currency,
		&i.BillingCycle,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const setSubscriptionDeleteFlag = `-- name: SetSubscriptionDeleteFlag :one
UPDATE subscriptions
SET pls_delete = $2
WHERE id = $1
RETURNING id, service_name, icon_url, username, email, enc_password, amount, currency, billing_cycle, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type SetSubscriptionDeleteFlagParams struct {
	ID        int32
	PlsDelete bool
}

func (q *Queries) SetSubscriptionDeleteFlag(ctx context.Context, arg SetSubscriptionDeleteFlagParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, setSubscriptionDeleteFlag, arg.ID, arg.PlsDelete)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.IconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Amount,
		&i.Currency,
		&i.BillingCycle,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const setSubscriptionDisclosureStatus = `-- name: SetSubscriptionDisclosureStatus :one
UPDATE subscriptions
SET is_disclosed = $2,
    trust_id = $3
WHERE id = $1
RETURNING id, service_name, icon_url, username, email, enc_password, amount, currency, billing_cycle, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type SetSubscriptionDisclosureStatusParams struct {
	ID          int32
	IsDisclosed bool
	TrustID     int32
}

func (q *Queries) SetSubscriptionDisclosureStatus(ctx context.Context, arg SetSubscriptionDisclosureStatusParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, setSubscriptionDisclosureStatus, arg.ID, arg.IsDisclosed, arg.TrustID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.IconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Amount,
		&i.Currency,
		&i.BillingCycle,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions
SET service_name = $2,
    icon_url = $3,
    username = $4,
    email = $5,
    enc_password = $6,
    amount = $7,
    currency = $8,
    billing_cycle = $9,
    memo = $10,
    message = $11,
    custom_data = $12
WHERE id = $1
RETURNING id, service_name, icon_url, username, email, enc_password, amount, currency, billing_cycle, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type UpdateSubscriptionParams struct {
	ID           int32
	ServiceName  pgtype.Text
	IconUrl      pgtype.Text
	Username     string
	Email        string
	EncPassword  []byte
	Amount       int32
	Currency     string
	BillingCycle string
	Memo         string
	Message      string
	CustomData   []byte
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, updateSubscription,
		arg.ID,
		arg.ServiceName,
		arg.IconUrl,
		arg.Username,
		arg.Email,
		arg.EncPassword,
		arg.Amount,
		arg.Currency,
		arg.BillingCycle,
		arg.Memo,
		arg.Message,
		arg.CustomData,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.IconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Amount,
		&i.Currency,
		&i.BillingCycle,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}
