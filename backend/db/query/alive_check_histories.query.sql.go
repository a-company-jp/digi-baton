// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: alive_check_histories.query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAliveCheckHistory = `-- name: GetAliveCheckHistory :one
SELECT id, target_user_id, check_time, check_method, check_success, check_success_time, custom_data FROM alive_check_histories WHERE id = $1
`

func (q *Queries) GetAliveCheckHistory(ctx context.Context, id pgtype.UUID) (AliveCheckHistory, error) {
	row := q.db.QueryRow(ctx, getAliveCheckHistory, id)
	var i AliveCheckHistory
	err := row.Scan(
		&i.ID,
		&i.TargetUserID,
		&i.CheckTime,
		&i.CheckMethod,
		&i.CheckSuccess,
		&i.CheckSuccessTime,
		&i.CustomData,
	)
	return i, err
}

const listAliveCheckHistoriesByTargetUserId = `-- name: ListAliveCheckHistoriesByTargetUserId :many
SELECT id, target_user_id, check_time, check_method, check_success, check_success_time, custom_data FROM alive_check_histories WHERE target_user_id = $1
`

func (q *Queries) ListAliveCheckHistoriesByTargetUserId(ctx context.Context, targetUserID pgtype.UUID) ([]AliveCheckHistory, error) {
	rows, err := q.db.Query(ctx, listAliveCheckHistoriesByTargetUserId, targetUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AliveCheckHistory
	for rows.Next() {
		var i AliveCheckHistory
		if err := rows.Scan(
			&i.ID,
			&i.TargetUserID,
			&i.CheckTime,
			&i.CheckMethod,
			&i.CheckSuccess,
			&i.CheckSuccessTime,
			&i.CustomData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
