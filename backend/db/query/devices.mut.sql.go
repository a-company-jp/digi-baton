// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: devices.mut.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices(id,
                    device_type,
                    credential_type,
                    device_description,
                    device_username,
                    enc_password,
                    memo,
                    message,
                    passer_id,
                    trust_id,
                    is_disclosed,
                    custom_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, false, $11)
RETURNING id, device_type, credential_type, device_description, device_username, enc_password, memo, message, passer_id, trust_id, is_disclosed, custom_data
`

type CreateDeviceParams struct {
	ID                int32
	DeviceType        int32
	CredentialType    int32
	DeviceDescription pgtype.Text
	DeviceUsername    pgtype.Text
	EncPassword       []byte
	Memo              string
	Message           string
	PasserID          pgtype.UUID
	TrustID           pgtype.Int4
	CustomData        []byte
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.ID,
		arg.DeviceType,
		arg.CredentialType,
		arg.DeviceDescription,
		arg.DeviceUsername,
		arg.EncPassword,
		arg.Memo,
		arg.Message,
		arg.PasserID,
		arg.TrustID,
		arg.CustomData,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceType,
		&i.CredentialType,
		&i.DeviceDescription,
		&i.DeviceUsername,
		&i.EncPassword,
		&i.Memo,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM devices
WHERE id = $1 AND passer_id = $2
RETURNING id, device_type, credential_type, device_description, device_username, enc_password, memo, message, passer_id, trust_id, is_disclosed, custom_data
`

type DeleteDeviceParams struct {
	ID       int32
	PasserID pgtype.UUID
}

func (q *Queries) DeleteDevice(ctx context.Context, arg DeleteDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, deleteDevice, arg.ID, arg.PasserID)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceType,
		&i.CredentialType,
		&i.DeviceDescription,
		&i.DeviceUsername,
		&i.EncPassword,
		&i.Memo,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET device_type = $2,
    credential_type = $3,
    device_description = $4,
    device_username = $5,
    enc_password = $6,
    memo = $7,
    message = $8,
    custom_data = $9
WHERE id = $1
RETURNING id, device_type, credential_type, device_description, device_username, enc_password, memo, message, passer_id, trust_id, is_disclosed, custom_data
`

type UpdateDeviceParams struct {
	ID                int32
	DeviceType        int32
	CredentialType    int32
	DeviceDescription pgtype.Text
	DeviceUsername    pgtype.Text
	EncPassword       []byte
	Memo              string
	Message           string
	CustomData        []byte
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.ID,
		arg.DeviceType,
		arg.CredentialType,
		arg.DeviceDescription,
		arg.DeviceUsername,
		arg.EncPassword,
		arg.Memo,
		arg.Message,
		arg.CustomData,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceType,
		&i.CredentialType,
		&i.DeviceDescription,
		&i.DeviceUsername,
		&i.EncPassword,
		&i.Memo,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}
