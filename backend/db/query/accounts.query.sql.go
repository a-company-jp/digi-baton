// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAccount = `-- name: GetAccount :one
SELECT accounts.id, accounts.app_template_id, accounts.app_name, accounts.app_description, accounts.app_icon_url, accounts.account_username, accounts.enc_password, accounts.memo, accounts.pls_delete, accounts.message, accounts.passer_id, accounts.trust_id, accounts.is_disclosed, accounts.custom_data
FROM accounts
WHERE accounts.id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.AccountUsername,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const listAccountsByPasserId = `-- name: ListAccountsByPasserId :many
SELECT accounts.id, accounts.app_template_id, accounts.app_name, accounts.app_description, accounts.app_icon_url, accounts.account_username, accounts.enc_password, accounts.memo, accounts.pls_delete, accounts.message, accounts.passer_id, accounts.trust_id, accounts.is_disclosed, accounts.custom_data
FROM accounts
WHERE accounts.passer_id = $1
ORDER BY accounts.id DESC
`

func (q *Queries) ListAccountsByPasserId(ctx context.Context, passerID pgtype.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccountsByPasserId, passerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AppTemplateID,
			&i.AppName,
			&i.AppDescription,
			&i.AppIconUrl,
			&i.AccountUsername,
			&i.EncPassword,
			&i.Memo,
			&i.PlsDelete,
			&i.Message,
			&i.PasserID,
			&i.TrustID,
			&i.IsDisclosed,
			&i.CustomData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDisclosedAccountsByReceiverId = `-- name: ListDisclosedAccountsByReceiverId :many
SELECT accounts.id, accounts.app_template_id, accounts.app_name, accounts.app_description, accounts.app_icon_url, accounts.account_username, accounts.enc_password, accounts.memo, accounts.pls_delete, accounts.message, accounts.passer_id, accounts.trust_id, accounts.is_disclosed, accounts.custom_data
FROM accounts
JOIN trusts t ON accounts.trust_id = t.id
WHERE t.receiver_user_id = $1 AND accounts.is_disclosed = true
`

func (q *Queries) ListDisclosedAccountsByReceiverId(ctx context.Context, receiverUserID pgtype.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, listDisclosedAccountsByReceiverId, receiverUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AppTemplateID,
			&i.AppName,
			&i.AppDescription,
			&i.AppIconUrl,
			&i.AccountUsername,
			&i.EncPassword,
			&i.Memo,
			&i.PlsDelete,
			&i.Message,
			&i.PasserID,
			&i.TrustID,
			&i.IsDisclosed,
			&i.CustomData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
