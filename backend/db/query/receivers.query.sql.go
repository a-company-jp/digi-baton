// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: receivers.query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listReceiversByUserId = `-- name: ListReceiversByUserId :many
SELECT trusts.id, users.clerk_user_id, users.id AS user_id 
FROM trusts
JOIN users ON trusts.receiver_user_id = users.id
WHERE trusts.passer_user_id = $1
`

type ListReceiversByUserIdRow struct {
	ID          int32
	ClerkUserID string
	UserID      pgtype.UUID
}

func (q *Queries) ListReceiversByUserId(ctx context.Context, passerUserID pgtype.UUID) ([]ListReceiversByUserIdRow, error) {
	rows, err := q.db.Query(ctx, listReceiversByUserId, passerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListReceiversByUserIdRow
	for rows.Next() {
		var i ListReceiversByUserIdRow
		if err := rows.Scan(&i.ID, &i.ClerkUserID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
