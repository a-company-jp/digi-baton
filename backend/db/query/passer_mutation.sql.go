// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: passer_mutation.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDevice = `-- name: AddDevice :exec
INSERT INTO devices(id,
                    device_type,
                    credential_type,
                    device_description,
                    device_username,
                    enc_password,
                    memo,
                    message,
                    passer_id,
                    trust_id,
                    is_disclosed,
                    custom_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, false, $11)
`

type AddDeviceParams struct {
	ID                int32
	DeviceType        int32
	CredentialType    int32
	DeviceDescription pgtype.Text
	DeviceUsername    pgtype.Text
	EncPassword       []byte
	Memo              string
	Message           string
	PasserID          pgtype.UUID
	TrustID           pgtype.Int4
	CustomData        []byte
}

func (q *Queries) AddDevice(ctx context.Context, arg AddDeviceParams) error {
	_, err := q.db.Exec(ctx, addDevice,
		arg.ID,
		arg.DeviceType,
		arg.CredentialType,
		arg.DeviceDescription,
		arg.DeviceUsername,
		arg.EncPassword,
		arg.Memo,
		arg.Message,
		arg.PasserID,
		arg.TrustID,
		arg.CustomData,
	)
	return err
}

const addReceiver = `-- name: AddReceiver :exec
INSERT INTO trusts(receiver_user_id,
                   passer_user_id)
VALUES ($1, $2)
`

type AddReceiverParams struct {
	ReceiverUserID pgtype.UUID
	PasserUserID   pgtype.UUID
}

func (q *Queries) AddReceiver(ctx context.Context, arg AddReceiverParams) error {
	_, err := q.db.Exec(ctx, addReceiver, arg.ReceiverUserID, arg.PasserUserID)
	return err
}

const assignReceiverToAccount = `-- name: AssignReceiverToAccount :exec
INSERT INTO accounts(trust_id)
VALUES ($1)
`

func (q *Queries) AssignReceiverToAccount(ctx context.Context, trustID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, assignReceiverToAccount, trustID)
	return err
}

const register = `-- name: Register :exec
INSERT INTO users(id,
                  default_receiver_id,
                  clerk_user_id)
VALUES ($1, $2, $3)
`

type RegisterParams struct {
	ID                pgtype.UUID
	DefaultReceiverID pgtype.UUID
	ClerkUserID       string
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) error {
	_, err := q.db.Exec(ctx, register, arg.ID, arg.DefaultReceiverID, arg.ClerkUserID)
	return err
}

const updateDefaultReceiver = `-- name: UpdateDefaultReceiver :exec
UPDATE users
SET default_receiver_id = $1
WHERE id = $2
`

type UpdateDefaultReceiverParams struct {
	DefaultReceiverID pgtype.UUID
	ID                pgtype.UUID
}

func (q *Queries) UpdateDefaultReceiver(ctx context.Context, arg UpdateDefaultReceiverParams) error {
	_, err := q.db.Exec(ctx, updateDefaultReceiver, arg.DefaultReceiverID, arg.ID)
	return err
}
