// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: alive_check_histories.mut.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAliveCheckHistory = `-- name: CreateAliveCheckHistory :one
INSERT INTO alive_check_histories(id,
                                target_user_id,
                                check_method,
                                check_time,
                                check_success,
                                custom_data)
VALUES ($1, $2, $3, $4, false, $5)
RETURNING id, target_user_id, check_time, check_method, check_success, check_success_time, custom_data
`

type CreateAliveCheckHistoryParams struct {
	ID           pgtype.UUID
	TargetUserID pgtype.UUID
	CheckMethod  int32
	CheckTime    pgtype.Timestamp
	CustomData   []byte
}

func (q *Queries) CreateAliveCheckHistory(ctx context.Context, arg CreateAliveCheckHistoryParams) (AliveCheckHistory, error) {
	row := q.db.QueryRow(ctx, createAliveCheckHistory,
		arg.ID,
		arg.TargetUserID,
		arg.CheckMethod,
		arg.CheckTime,
		arg.CustomData,
	)
	var i AliveCheckHistory
	err := row.Scan(
		&i.ID,
		&i.TargetUserID,
		&i.CheckTime,
		&i.CheckMethod,
		&i.CheckSuccess,
		&i.CheckSuccessTime,
		&i.CustomData,
	)
	return i, err
}

const deleteAliveCheckHistory = `-- name: DeleteAliveCheckHistory :one
DELETE FROM alive_check_histories
WHERE id = $1
RETURNING id, target_user_id, check_time, check_method, check_success, check_success_time, custom_data
`

func (q *Queries) DeleteAliveCheckHistory(ctx context.Context, id pgtype.UUID) (AliveCheckHistory, error) {
	row := q.db.QueryRow(ctx, deleteAliveCheckHistory, id)
	var i AliveCheckHistory
	err := row.Scan(
		&i.ID,
		&i.TargetUserID,
		&i.CheckTime,
		&i.CheckMethod,
		&i.CheckSuccess,
		&i.CheckSuccessTime,
		&i.CustomData,
	)
	return i, err
}

const updateAliveCheckHistory = `-- name: UpdateAliveCheckHistory :one
UPDATE alive_check_histories
SET check_method = $2,
    check_success = $3,
    check_success_time = $4,
    custom_data = $5
WHERE id = $1
RETURNING id, target_user_id, check_time, check_method, check_success, check_success_time, custom_data
`

type UpdateAliveCheckHistoryParams struct {
	ID               pgtype.UUID
	CheckMethod      int32
	CheckSuccess     bool
	CheckSuccessTime pgtype.Timestamp
	CustomData       []byte
}

func (q *Queries) UpdateAliveCheckHistory(ctx context.Context, arg UpdateAliveCheckHistoryParams) (AliveCheckHistory, error) {
	row := q.db.QueryRow(ctx, updateAliveCheckHistory,
		arg.ID,
		arg.CheckMethod,
		arg.CheckSuccess,
		arg.CheckSuccessTime,
		arg.CustomData,
	)
	var i AliveCheckHistory
	err := row.Scan(
		&i.ID,
		&i.TargetUserID,
		&i.CheckTime,
		&i.CheckMethod,
		&i.CheckSuccess,
		&i.CheckSuccessTime,
		&i.CustomData,
	)
	return i, err
}
