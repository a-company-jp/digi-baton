// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.mut.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignReceiverToAccount = `-- name: AssignReceiverToAccount :one
UPDATE accounts
SET trust_id = $2
WHERE id = $1
RETURNING id, app_template_id, app_name, app_description, app_icon_url, username, email, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type AssignReceiverToAccountParams struct {
	ID      int32
	TrustID int32
}

func (q *Queries) AssignReceiverToAccount(ctx context.Context, arg AssignReceiverToAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, assignReceiverToAccount, arg.ID, arg.TrustID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(app_template_id,
                    app_name,
                    app_description,
                    app_icon_url,
                    username,
                    email,
                    enc_password,
                    memo,
                    pls_delete,
                    message,
                    passer_id,
                    trust_id,
                    is_disclosed,
                    custom_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, false, $9, $10, $11, false, $12)
RETURNING id, app_template_id, app_name, app_description, app_icon_url, username, email, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type CreateAccountParams struct {
	AppTemplateID  pgtype.Int4
	AppName        pgtype.Text
	AppDescription pgtype.Text
	AppIconUrl     pgtype.Text
	Username       string
	Email          string
	EncPassword    []byte
	Memo           string
	Message        string
	PasserID       pgtype.UUID
	TrustID        int32
	CustomData     []byte
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.AppTemplateID,
		arg.AppName,
		arg.AppDescription,
		arg.AppIconUrl,
		arg.Username,
		arg.Email,
		arg.EncPassword,
		arg.Memo,
		arg.Message,
		arg.PasserID,
		arg.TrustID,
		arg.CustomData,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts
WHERE id = $1 AND passer_id = $2
RETURNING id, app_template_id, app_name, app_description, app_icon_url, username, email, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type DeleteAccountParams struct {
	ID       int32
	PasserID pgtype.UUID
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, deleteAccount, arg.ID, arg.PasserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const setAccountDisclosureStatus = `-- name: SetAccountDisclosureStatus :one
UPDATE accounts
SET is_disclosed = $2,
    trust_id = $3
WHERE id = $1
RETURNING id, app_template_id, app_name, app_description, app_icon_url, username, email, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type SetAccountDisclosureStatusParams struct {
	ID          int32
	IsDisclosed bool
	TrustID     int32
}

func (q *Queries) SetAccountDisclosureStatus(ctx context.Context, arg SetAccountDisclosureStatusParams) (Account, error) {
	row := q.db.QueryRow(ctx, setAccountDisclosureStatus, arg.ID, arg.IsDisclosed, arg.TrustID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET app_template_id = $2,
    app_name = $3,
    app_description = $4,
    app_icon_url = $5,
    username = $6,
    email = $7,
    enc_password = $8,
    memo = $9,
    message = $10,
    custom_data = $11
WHERE id = $1 AND passer_id = $12
RETURNING id, app_template_id, app_name, app_description, app_icon_url, username, email, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type UpdateAccountParams struct {
	ID             int32
	AppTemplateID  pgtype.Int4
	AppName        pgtype.Text
	AppDescription pgtype.Text
	AppIconUrl     pgtype.Text
	Username       string
	Email          string
	EncPassword    []byte
	Memo           string
	Message        string
	CustomData     []byte
	PasserID       pgtype.UUID
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.AppTemplateID,
		arg.AppName,
		arg.AppDescription,
		arg.AppIconUrl,
		arg.Username,
		arg.Email,
		arg.EncPassword,
		arg.Memo,
		arg.Message,
		arg.CustomData,
		arg.PasserID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}

const updateDeleteRequest = `-- name: UpdateDeleteRequest :one
UPDATE accounts
SET pls_delete = $2
WHERE id = $1
RETURNING id, app_template_id, app_name, app_description, app_icon_url, username, email, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data
`

type UpdateDeleteRequestParams struct {
	ID        int32
	PlsDelete bool
}

func (q *Queries) UpdateDeleteRequest(ctx context.Context, arg UpdateDeleteRequestParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateDeleteRequest, arg.ID, arg.PlsDelete)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AppTemplateID,
		&i.AppName,
		&i.AppDescription,
		&i.AppIconUrl,
		&i.Username,
		&i.Email,
		&i.EncPassword,
		&i.Memo,
		&i.PlsDelete,
		&i.Message,
		&i.PasserID,
		&i.TrustID,
		&i.IsDisclosed,
		&i.CustomData,
	)
	return i, err
}
