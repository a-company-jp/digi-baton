// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: disclosures.mut.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDisclosure = `-- name: CreateDisclosure :one
INSERT INTO disclosures(requester_id,
                        passer_id,
                        issued_time,
                        deadline,
                        custom_data,
                        disclosed,
                        in_progress)
VALUES ($1, $2, $3, $4, $5, false, true)
RETURNING id, requester_id, passer_id, issued_time, in_progress, disclosed, disclosed_at, prevented_by, deadline, custom_data
`

type CreateDisclosureParams struct {
	RequesterID pgtype.UUID
	PasserID    pgtype.UUID
	IssuedTime  pgtype.Timestamp
	Deadline    pgtype.Timestamp
	CustomData  []byte
}

func (q *Queries) CreateDisclosure(ctx context.Context, arg CreateDisclosureParams) (Disclosure, error) {
	row := q.db.QueryRow(ctx, createDisclosure,
		arg.RequesterID,
		arg.PasserID,
		arg.IssuedTime,
		arg.Deadline,
		arg.CustomData,
	)
	var i Disclosure
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.PasserID,
		&i.IssuedTime,
		&i.InProgress,
		&i.Disclosed,
		&i.DisclosedAt,
		&i.PreventedBy,
		&i.Deadline,
		&i.CustomData,
	)
	return i, err
}

const deleteDisclosure = `-- name: DeleteDisclosure :one
DELETE FROM disclosures
WHERE id = $1 AND requester_id = $2
RETURNING id, requester_id, passer_id, issued_time, in_progress, disclosed, disclosed_at, prevented_by, deadline, custom_data
`

type DeleteDisclosureParams struct {
	ID          int32
	RequesterID pgtype.UUID
}

func (q *Queries) DeleteDisclosure(ctx context.Context, arg DeleteDisclosureParams) (Disclosure, error) {
	row := q.db.QueryRow(ctx, deleteDisclosure, arg.ID, arg.RequesterID)
	var i Disclosure
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.PasserID,
		&i.IssuedTime,
		&i.InProgress,
		&i.Disclosed,
		&i.DisclosedAt,
		&i.PreventedBy,
		&i.Deadline,
		&i.CustomData,
	)
	return i, err
}

const updateDisclosure = `-- name: UpdateDisclosure :one
UPDATE disclosures
SET requester_id = $2,
    passer_id = $3,
    disclosed = $4,
    deadline = $5,
    prevented_by = $6,
    custom_data = $7,
    in_progress = $8
WHERE id = $1 AND requester_id = $2
RETURNING id, requester_id, passer_id, issued_time, in_progress, disclosed, disclosed_at, prevented_by, deadline, custom_data
`

type UpdateDisclosureParams struct {
	ID          int32
	RequesterID pgtype.UUID
	PasserID    pgtype.UUID
	Disclosed   bool
	Deadline    pgtype.Timestamp
	PreventedBy pgtype.UUID
	CustomData  []byte
	InProgress  bool
}

func (q *Queries) UpdateDisclosure(ctx context.Context, arg UpdateDisclosureParams) (Disclosure, error) {
	row := q.db.QueryRow(ctx, updateDisclosure,
		arg.ID,
		arg.RequesterID,
		arg.PasserID,
		arg.Disclosed,
		arg.Deadline,
		arg.PreventedBy,
		arg.CustomData,
		arg.InProgress,
	)
	var i Disclosure
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.PasserID,
		&i.IssuedTime,
		&i.InProgress,
		&i.Disclosed,
		&i.DisclosedAt,
		&i.PreventedBy,
		&i.Deadline,
		&i.CustomData,
	)
	return i, err
}
