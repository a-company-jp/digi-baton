// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: disclosures.query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDisclosure = `-- name: GetDisclosure :one
SELECT id, requester_id, passer_id, issued_time, in_progress, disclosed, disclosed_at, prevented_by, deadline, custom_data FROM disclosures WHERE id = $1
`

func (q *Queries) GetDisclosure(ctx context.Context, id int32) (Disclosure, error) {
	row := q.db.QueryRow(ctx, getDisclosure, id)
	var i Disclosure
	err := row.Scan(
		&i.ID,
		&i.RequesterID,
		&i.PasserID,
		&i.IssuedTime,
		&i.InProgress,
		&i.Disclosed,
		&i.DisclosedAt,
		&i.PreventedBy,
		&i.Deadline,
		&i.CustomData,
	)
	return i, err
}

const listDisclosuresByRequesterId = `-- name: ListDisclosuresByRequesterId :many
SELECT id, requester_id, passer_id, issued_time, in_progress, disclosed, disclosed_at, prevented_by, deadline, custom_data FROM disclosures WHERE requester_id = $1
`

func (q *Queries) ListDisclosuresByRequesterId(ctx context.Context, requesterID pgtype.UUID) ([]Disclosure, error) {
	rows, err := q.db.Query(ctx, listDisclosuresByRequesterId, requesterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Disclosure
	for rows.Next() {
		var i Disclosure
		if err := rows.Scan(
			&i.ID,
			&i.RequesterID,
			&i.PasserID,
			&i.IssuedTime,
			&i.InProgress,
			&i.Disclosed,
			&i.DisclosedAt,
			&i.PreventedBy,
			&i.Deadline,
			&i.CustomData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
