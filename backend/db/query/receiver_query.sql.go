// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: receiver_query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listAccountsByReceiverId = `-- name: ListAccountsByReceiverId :many
SELECT accounts.id, app_template_id, app_name, app_description, app_icon_url, account_username, enc_password, memo, pls_delete, message, passer_id, trust_id, is_disclosed, custom_data, t.id, receiver_user_id, passer_user_id
FROM accounts
JOIN trusts t ON accounts.trust_id = t.id
WHERE t.receiver_user_id = $1
`

type ListAccountsByReceiverIdRow struct {
	ID              int32
	AppTemplateID   pgtype.Int4
	AppName         pgtype.Text
	AppDescription  pgtype.Text
	AppIconUrl      pgtype.Text
	AccountUsername string
	EncPassword     []byte
	Memo            string
	PlsDelete       bool
	Message         string
	PasserID        pgtype.UUID
	TrustID         pgtype.Int4
	IsDisclosed     bool
	CustomData      []byte
	ID_2            int32
	ReceiverUserID  pgtype.UUID
	PasserUserID    pgtype.UUID
}

func (q *Queries) ListAccountsByReceiverId(ctx context.Context, receiverUserID pgtype.UUID) ([]ListAccountsByReceiverIdRow, error) {
	rows, err := q.db.Query(ctx, listAccountsByReceiverId, receiverUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAccountsByReceiverIdRow
	for rows.Next() {
		var i ListAccountsByReceiverIdRow
		if err := rows.Scan(
			&i.ID,
			&i.AppTemplateID,
			&i.AppName,
			&i.AppDescription,
			&i.AppIconUrl,
			&i.AccountUsername,
			&i.EncPassword,
			&i.Memo,
			&i.PlsDelete,
			&i.Message,
			&i.PasserID,
			&i.TrustID,
			&i.IsDisclosed,
			&i.CustomData,
			&i.ID_2,
			&i.ReceiverUserID,
			&i.PasserUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
