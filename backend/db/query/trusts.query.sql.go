// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trusts.query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTrust = `-- name: GetTrust :one
SELECT id, receiver_user_id, passer_user_id
FROM trusts
WHERE id = $1
`

func (q *Queries) GetTrust(ctx context.Context, id int32) (Trust, error) {
	row := q.db.QueryRow(ctx, getTrust, id)
	var i Trust
	err := row.Scan(&i.ID, &i.ReceiverUserID, &i.PasserUserID)
	return i, err
}

const listTrustersByReceiverID = `-- name: ListTrustersByReceiverID :many
SELECT u.id, u.clerk_user_id
FROM trusts
         LEFT JOIN public.users u on trusts.passer_user_id = u.id
WHERE receiver_user_id = $1
`

type ListTrustersByReceiverIDRow struct {
	ID          pgtype.UUID
	ClerkUserID pgtype.Text
}

func (q *Queries) ListTrustersByReceiverID(ctx context.Context, receiverUserID pgtype.UUID) ([]ListTrustersByReceiverIDRow, error) {
	rows, err := q.db.Query(ctx, listTrustersByReceiverID, receiverUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTrustersByReceiverIDRow
	for rows.Next() {
		var i ListTrustersByReceiverIDRow
		if err := rows.Scan(&i.ID, &i.ClerkUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrustsByPasserID = `-- name: ListTrustsByPasserID :many
SELECT id, receiver_user_id, passer_user_id
FROM trusts
WHERE passer_user_id = $1
`

func (q *Queries) ListTrustsByPasserID(ctx context.Context, passerUserID pgtype.UUID) ([]Trust, error) {
	rows, err := q.db.Query(ctx, listTrustsByPasserID, passerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trust
	for rows.Next() {
		var i Trust
		if err := rows.Scan(&i.ID, &i.ReceiverUserID, &i.PasserUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
