// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trusts.mut.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTrust = `-- name: CreateTrust :one
INSERT INTO trusts(receiver_user_id,
                   passer_user_id)
VALUES ($1, $2)
RETURNING id, receiver_user_id, passer_user_id
`

type CreateTrustParams struct {
	ReceiverUserID pgtype.UUID
	PasserUserID   pgtype.UUID
}

func (q *Queries) CreateTrust(ctx context.Context, arg CreateTrustParams) (Trust, error) {
	row := q.db.QueryRow(ctx, createTrust, arg.ReceiverUserID, arg.PasserUserID)
	var i Trust
	err := row.Scan(&i.ID, &i.ReceiverUserID, &i.PasserUserID)
	return i, err
}

const deleteTrust = `-- name: DeleteTrust :one
DELETE FROM trusts
WHERE id = $1 AND passer_user_id = $2
RETURNING id, receiver_user_id, passer_user_id
`

type DeleteTrustParams struct {
	ID           int32
	PasserUserID pgtype.UUID
}

func (q *Queries) DeleteTrust(ctx context.Context, arg DeleteTrustParams) (Trust, error) {
	row := q.db.QueryRow(ctx, deleteTrust, arg.ID, arg.PasserUserID)
	var i Trust
	err := row.Scan(&i.ID, &i.ReceiverUserID, &i.PasserUserID)
	return i, err
}

const updateTrust = `-- name: UpdateTrust :one
UPDATE trusts
SET receiver_user_id = $2
WHERE id = $1 AND passer_user_id = $3
RETURNING id, receiver_user_id, passer_user_id
`

type UpdateTrustParams struct {
	ID             int32
	ReceiverUserID pgtype.UUID
	PasserUserID   pgtype.UUID
}

func (q *Queries) UpdateTrust(ctx context.Context, arg UpdateTrustParams) (Trust, error) {
	row := q.db.QueryRow(ctx, updateTrust, arg.ID, arg.ReceiverUserID, arg.PasserUserID)
	var i Trust
	err := row.Scan(&i.ID, &i.ReceiverUserID, &i.PasserUserID)
	return i, err
}
