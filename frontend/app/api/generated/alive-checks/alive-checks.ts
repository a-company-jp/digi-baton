/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAliveChecksParams,
  HandlersAliveCheckHistoryCreateRequest,
  HandlersAliveCheckHistoryResponse,
  HandlersAliveCheckHistoryUpdateRequest,
  HandlersErrorResponse
} from '.././schemas';

import getAliveChecksMutator from '../../../../lib/fetch';
import postAliveChecksMutator from '../../../../lib/fetch';
import putAliveChecksMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 * @summary „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥‰∏ÄË¶ßÂèñÂæó
 */
export type getAliveChecksResponse200 = {
  data: HandlersAliveCheckHistoryResponse[]
  status: 200
}
    
export type getAliveChecksResponseComposite = getAliveChecksResponse200;
    
export type getAliveChecksResponse = getAliveChecksResponseComposite & {
  headers: Headers;
}

export const getGetAliveChecksUrl = (params: GetAliveChecksParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/alive-checks?${stringifiedParams}` : `/alive-checks`
}

export const getAliveChecks = async (params: GetAliveChecksParams, options?: RequestInit): Promise<getAliveChecksResponse> => {
  
  return getAliveChecksMutator<getAliveChecksResponse>(getGetAliveChecksUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetAliveChecksQueryKey = (params: GetAliveChecksParams,) => {
    return [`/alive-checks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAliveChecksQueryOptions = <TData = Awaited<ReturnType<typeof getAliveChecks>>, TError = unknown>(params: GetAliveChecksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAliveChecks>>, TError, TData>>, request?: SecondParameter<typeof getAliveChecksMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAliveChecksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAliveChecks>>> = ({ signal }) => getAliveChecks(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAliveChecks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAliveChecksQueryResult = NonNullable<Awaited<ReturnType<typeof getAliveChecks>>>
export type GetAliveChecksQueryError = unknown


export function useGetAliveChecks<TData = Awaited<ReturnType<typeof getAliveChecks>>, TError = unknown>(
 params: GetAliveChecksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAliveChecks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAliveChecks>>,
          TError,
          Awaited<ReturnType<typeof getAliveChecks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getAliveChecksMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAliveChecks<TData = Awaited<ReturnType<typeof getAliveChecks>>, TError = unknown>(
 params: GetAliveChecksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAliveChecks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAliveChecks>>,
          TError,
          Awaited<ReturnType<typeof getAliveChecks>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getAliveChecksMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAliveChecks<TData = Awaited<ReturnType<typeof getAliveChecks>>, TError = unknown>(
 params: GetAliveChecksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAliveChecks>>, TError, TData>>, request?: SecondParameter<typeof getAliveChecksMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥‰∏ÄË¶ßÂèñÂæó
 */

export function useGetAliveChecks<TData = Awaited<ReturnType<typeof getAliveChecks>>, TError = unknown>(
 params: GetAliveChecksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAliveChecks>>, TError, TData>>, request?: SecondParameter<typeof getAliveChecksMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAliveChecksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥„Çí‰ΩúÊàê„Åô„Çã
 * @summary „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥‰ΩúÊàê
 */
export type postAliveChecksResponse200 = {
  data: HandlersAliveCheckHistoryResponse
  status: 200
}

export type postAliveChecksResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type postAliveChecksResponseComposite = postAliveChecksResponse200 | postAliveChecksResponse400;
    
export type postAliveChecksResponse = postAliveChecksResponseComposite & {
  headers: Headers;
}

export const getPostAliveChecksUrl = () => {


  

  return `/alive-checks`
}

export const postAliveChecks = async (handlersAliveCheckHistoryCreateRequest: HandlersAliveCheckHistoryCreateRequest, options?: RequestInit): Promise<postAliveChecksResponse> => {
  
  return postAliveChecksMutator<postAliveChecksResponse>(getPostAliveChecksUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersAliveCheckHistoryCreateRequest,)
  }
);}




export const getPostAliveChecksMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAliveChecks>>, TError,{data: HandlersAliveCheckHistoryCreateRequest}, TContext>, request?: SecondParameter<typeof postAliveChecksMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAliveChecks>>, TError,{data: HandlersAliveCheckHistoryCreateRequest}, TContext> => {
    
const mutationKey = ['postAliveChecks'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAliveChecks>>, {data: HandlersAliveCheckHistoryCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAliveChecks(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAliveChecksMutationResult = NonNullable<Awaited<ReturnType<typeof postAliveChecks>>>
    export type PostAliveChecksMutationBody = HandlersAliveCheckHistoryCreateRequest
    export type PostAliveChecksMutationError = HandlersErrorResponse

    /**
 * @summary „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥‰ΩúÊàê
 */
export const usePostAliveChecks = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAliveChecks>>, TError,{data: HandlersAliveCheckHistoryCreateRequest}, TContext>, request?: SecondParameter<typeof postAliveChecksMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAliveChecks>>,
        TError,
        {data: HandlersAliveCheckHistoryCreateRequest},
        TContext
      > => {

      const mutationOptions = getPostAliveChecksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥„ÇíÊõ¥Êñ∞„Åô„Çã
 * @summary „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥Êõ¥Êñ∞
 */
export type putAliveChecksResponse200 = {
  data: HandlersAliveCheckHistoryResponse
  status: 200
}

export type putAliveChecksResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type putAliveChecksResponseComposite = putAliveChecksResponse200 | putAliveChecksResponse400;
    
export type putAliveChecksResponse = putAliveChecksResponseComposite & {
  headers: Headers;
}

export const getPutAliveChecksUrl = () => {


  

  return `/alive-checks`
}

export const putAliveChecks = async (handlersAliveCheckHistoryUpdateRequest: HandlersAliveCheckHistoryUpdateRequest, options?: RequestInit): Promise<putAliveChecksResponse> => {
  
  return putAliveChecksMutator<putAliveChecksResponse>(getPutAliveChecksUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersAliveCheckHistoryUpdateRequest,)
  }
);}




export const getPutAliveChecksMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAliveChecks>>, TError,{data: HandlersAliveCheckHistoryUpdateRequest}, TContext>, request?: SecondParameter<typeof putAliveChecksMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAliveChecks>>, TError,{data: HandlersAliveCheckHistoryUpdateRequest}, TContext> => {
    
const mutationKey = ['putAliveChecks'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAliveChecks>>, {data: HandlersAliveCheckHistoryUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  putAliveChecks(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAliveChecksMutationResult = NonNullable<Awaited<ReturnType<typeof putAliveChecks>>>
    export type PutAliveChecksMutationBody = HandlersAliveCheckHistoryUpdateRequest
    export type PutAliveChecksMutationError = HandlersErrorResponse

    /**
 * @summary „Ç¢„É©„Ç§„Éñ„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥Êõ¥Êñ∞
 */
export const usePutAliveChecks = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAliveChecks>>, TError,{data: HandlersAliveCheckHistoryUpdateRequest}, TContext>, request?: SecondParameter<typeof putAliveChecksMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putAliveChecks>>,
        TError,
        {data: HandlersAliveCheckHistoryUpdateRequest},
        TContext
      > => {

      const mutationOptions = getPutAliveChecksMutationOptions(options);

      return useMutation(mutationOptions);
    }
    