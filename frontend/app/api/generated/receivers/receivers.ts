/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetReceiversParams,
  HandlersErrorResponse,
  HandlersReceiverResponse
} from '.././schemas';

import getReceiversMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Áõ∏Á∂ö‰∫∫„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary Áõ∏Á∂ö‰∫∫„ÅÆ‰∏ÄË¶ßÂèñÂæó
 */
export type getReceiversResponse200 = {
  data: HandlersReceiverResponse[]
  status: 200
}

export type getReceiversResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type getReceiversResponseComposite = getReceiversResponse200 | getReceiversResponse400;
    
export type getReceiversResponse = getReceiversResponseComposite & {
  headers: Headers;
}

export const getGetReceiversUrl = (params: GetReceiversParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/receivers?${stringifiedParams}` : `/receivers`
}

export const getReceivers = async (params: GetReceiversParams, options?: RequestInit): Promise<getReceiversResponse> => {
  
  return getReceiversMutator<getReceiversResponse>(getGetReceiversUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetReceiversQueryKey = (params: GetReceiversParams,) => {
    return [`/receivers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReceiversQueryOptions = <TData = Awaited<ReturnType<typeof getReceivers>>, TError = HandlersErrorResponse>(params: GetReceiversParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceivers>>, TError, TData>>, request?: SecondParameter<typeof getReceiversMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReceiversQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReceivers>>> = ({ signal }) => getReceivers(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReceivers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReceiversQueryResult = NonNullable<Awaited<ReturnType<typeof getReceivers>>>
export type GetReceiversQueryError = HandlersErrorResponse


export function useGetReceivers<TData = Awaited<ReturnType<typeof getReceivers>>, TError = HandlersErrorResponse>(
 params: GetReceiversParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceivers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceivers>>,
          TError,
          Awaited<ReturnType<typeof getReceivers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getReceiversMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceivers<TData = Awaited<ReturnType<typeof getReceivers>>, TError = HandlersErrorResponse>(
 params: GetReceiversParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceivers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceivers>>,
          TError,
          Awaited<ReturnType<typeof getReceivers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getReceiversMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetReceivers<TData = Awaited<ReturnType<typeof getReceivers>>, TError = HandlersErrorResponse>(
 params: GetReceiversParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceivers>>, TError, TData>>, request?: SecondParameter<typeof getReceiversMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Áõ∏Á∂ö‰∫∫„ÅÆ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetReceivers<TData = Awaited<ReturnType<typeof getReceivers>>, TError = HandlersErrorResponse>(
 params: GetReceiversParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReceivers>>, TError, TData>>, request?: SecondParameter<typeof getReceiversMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetReceiversQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



