/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetTrustsParams,
  HandlersDeleteTrustRequest,
  HandlersTrustRequest,
  HandlersTrustResponse,
  HandlersUpdateTrustRequest
} from '.././schemas';

import getTrustsMutator from '../../../../lib/fetch';
import putTrustsMutator from '../../../../lib/fetch';
import postTrustsMutator from '../../../../lib/fetch';
import deleteTrustsMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * „É¶„Éº„Ç∂„ÅåÈñãÁ§∫„Åó„Å¶„ÅÑ„ÇãÁõ∏Á∂öÈñ¢‰øÇ‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆ‰∏ÄË¶ßÂèñÂæó
 */
export type getTrustsResponse200 = {
  data: HandlersTrustResponse[]
  status: 200
}
    
export type getTrustsResponseComposite = getTrustsResponse200;
    
export type getTrustsResponse = getTrustsResponseComposite & {
  headers: Headers;
}

export const getGetTrustsUrl = (params: GetTrustsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/trusts?${stringifiedParams}` : `/trusts`
}

export const getTrusts = async (params: GetTrustsParams, options?: RequestInit): Promise<getTrustsResponse> => {
  
  return getTrustsMutator<getTrustsResponse>(getGetTrustsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetTrustsQueryKey = (params: GetTrustsParams,) => {
    return [`/trusts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTrustsQueryOptions = <TData = Awaited<ReturnType<typeof getTrusts>>, TError = unknown>(params: GetTrustsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrusts>>, TError, TData>>, request?: SecondParameter<typeof getTrustsMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTrustsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrusts>>> = ({ signal }) => getTrusts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTrusts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTrustsQueryResult = NonNullable<Awaited<ReturnType<typeof getTrusts>>>
export type GetTrustsQueryError = unknown


export function useGetTrusts<TData = Awaited<ReturnType<typeof getTrusts>>, TError = unknown>(
 params: GetTrustsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrusts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrusts>>,
          TError,
          Awaited<ReturnType<typeof getTrusts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getTrustsMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrusts<TData = Awaited<ReturnType<typeof getTrusts>>, TError = unknown>(
 params: GetTrustsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrusts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrusts>>,
          TError,
          Awaited<ReturnType<typeof getTrusts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getTrustsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrusts<TData = Awaited<ReturnType<typeof getTrusts>>, TError = unknown>(
 params: GetTrustsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrusts>>, TError, TData>>, request?: SecondParameter<typeof getTrustsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTrusts<TData = Awaited<ReturnType<typeof getTrusts>>, TError = unknown>(
 params: GetTrustsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrusts>>, TError, TData>>, request?: SecondParameter<typeof getTrustsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTrustsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * „É¶„Éº„Ç∂Èñì„ÅÆÁõ∏Á∂öÈñ¢‰øÇ„ÇíÊõ¥Êñ∞„Åô„Çã
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆÊõ¥Êñ∞
 */
export type putTrustsResponse200 = {
  data: HandlersTrustResponse
  status: 200
}
    
export type putTrustsResponseComposite = putTrustsResponse200;
    
export type putTrustsResponse = putTrustsResponseComposite & {
  headers: Headers;
}

export const getPutTrustsUrl = () => {


  

  return `/trusts`
}

export const putTrusts = async (handlersUpdateTrustRequest: HandlersUpdateTrustRequest, options?: RequestInit): Promise<putTrustsResponse> => {
  
  return putTrustsMutator<putTrustsResponse>(getPutTrustsUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersUpdateTrustRequest,)
  }
);}




export const getPutTrustsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTrusts>>, TError,{data: HandlersUpdateTrustRequest}, TContext>, request?: SecondParameter<typeof putTrustsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putTrusts>>, TError,{data: HandlersUpdateTrustRequest}, TContext> => {
    
const mutationKey = ['putTrusts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTrusts>>, {data: HandlersUpdateTrustRequest}> = (props) => {
          const {data} = props ?? {};

          return  putTrusts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTrustsMutationResult = NonNullable<Awaited<ReturnType<typeof putTrusts>>>
    export type PutTrustsMutationBody = HandlersUpdateTrustRequest
    export type PutTrustsMutationError = unknown

    /**
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆÊõ¥Êñ∞
 */
export const usePutTrusts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTrusts>>, TError,{data: HandlersUpdateTrustRequest}, TContext>, request?: SecondParameter<typeof putTrustsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTrusts>>,
        TError,
        {data: HandlersUpdateTrustRequest},
        TContext
      > => {

      const mutationOptions = getPutTrustsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „É¶„Éº„Ç∂Èñì„ÅÆÁõ∏Á∂öÈñ¢‰øÇ„Çí‰ΩúÊàê„Åô„Çã
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆ‰ΩúÊàê
 */
export type postTrustsResponse200 = {
  data: HandlersTrustResponse
  status: 200
}
    
export type postTrustsResponseComposite = postTrustsResponse200;
    
export type postTrustsResponse = postTrustsResponseComposite & {
  headers: Headers;
}

export const getPostTrustsUrl = () => {


  

  return `/trusts`
}

export const postTrusts = async (handlersTrustRequest: HandlersTrustRequest, options?: RequestInit): Promise<postTrustsResponse> => {
  
  return postTrustsMutator<postTrustsResponse>(getPostTrustsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersTrustRequest,)
  }
);}




export const getPostTrustsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTrusts>>, TError,{data: HandlersTrustRequest}, TContext>, request?: SecondParameter<typeof postTrustsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postTrusts>>, TError,{data: HandlersTrustRequest}, TContext> => {
    
const mutationKey = ['postTrusts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTrusts>>, {data: HandlersTrustRequest}> = (props) => {
          const {data} = props ?? {};

          return  postTrusts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTrustsMutationResult = NonNullable<Awaited<ReturnType<typeof postTrusts>>>
    export type PostTrustsMutationBody = HandlersTrustRequest
    export type PostTrustsMutationError = unknown

    /**
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆ‰ΩúÊàê
 */
export const usePostTrusts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTrusts>>, TError,{data: HandlersTrustRequest}, TContext>, request?: SecondParameter<typeof postTrustsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTrusts>>,
        TError,
        {data: HandlersTrustRequest},
        TContext
      > => {

      const mutationOptions = getPostTrustsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „É¶„Éº„Ç∂Èñì„ÅÆÁõ∏Á∂öÈñ¢‰øÇ„ÇíÂâäÈô§„Åô„Çã
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆÂâäÈô§
 */
export type deleteTrustsResponse200 = {
  data: HandlersTrustResponse
  status: 200
}
    
export type deleteTrustsResponseComposite = deleteTrustsResponse200;
    
export type deleteTrustsResponse = deleteTrustsResponseComposite & {
  headers: Headers;
}

export const getDeleteTrustsUrl = () => {


  

  return `/trusts`
}

export const deleteTrusts = async (handlersDeleteTrustRequest: HandlersDeleteTrustRequest, options?: RequestInit): Promise<deleteTrustsResponse> => {
  
  return deleteTrustsMutator<deleteTrustsResponse>(getDeleteTrustsUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersDeleteTrustRequest,)
  }
);}




export const getDeleteTrustsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTrusts>>, TError,{data: HandlersDeleteTrustRequest}, TContext>, request?: SecondParameter<typeof deleteTrustsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTrusts>>, TError,{data: HandlersDeleteTrustRequest}, TContext> => {
    
const mutationKey = ['deleteTrusts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTrusts>>, {data: HandlersDeleteTrustRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteTrusts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTrustsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTrusts>>>
    export type DeleteTrustsMutationBody = HandlersDeleteTrustRequest
    export type DeleteTrustsMutationError = unknown

    /**
 * @summary Áõ∏Á∂öÈñ¢‰øÇ„ÅÆÂâäÈô§
 */
export const useDeleteTrusts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTrusts>>, TError,{data: HandlersDeleteTrustRequest}, TContext>, request?: SecondParameter<typeof deleteTrustsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTrusts>>,
        TError,
        {data: HandlersDeleteTrustRequest},
        TContext
      > => {

      const mutationOptions = getDeleteTrustsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    