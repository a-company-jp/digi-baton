/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HandlersDeleteSubscriptionRequest,
  HandlersErrorResponse,
  HandlersSubscriptionCreateRequest,
  HandlersSubscriptionResponse,
  HandlersSubscriptionUpdateRequest
} from '.././schemas';

import deleteSubscriptionsMutator from '../../../../lib/fetch';
import getSubscriptionsMutator from '../../../../lib/fetch';
import postSubscriptionsMutator from '../../../../lib/fetch';
import putSubscriptionsMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * ÊåáÂÆö„Åï„Çå„Åü„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÇíÂâäÈô§„Åô„Çã
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÂâäÈô§
 */
export type deleteSubscriptionsResponse200 = {
  data: HandlersSubscriptionResponse
  status: 200
}

export type deleteSubscriptionsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type deleteSubscriptionsResponseComposite = deleteSubscriptionsResponse200 | deleteSubscriptionsResponse400;
    
export type deleteSubscriptionsResponse = deleteSubscriptionsResponseComposite & {
  headers: Headers;
}

export const getDeleteSubscriptionsUrl = () => {


  

  return `/subscriptions`
}

export const deleteSubscriptions = async (handlersDeleteSubscriptionRequest: HandlersDeleteSubscriptionRequest, options?: RequestInit): Promise<deleteSubscriptionsResponse> => {
  
  return deleteSubscriptionsMutator<deleteSubscriptionsResponse>(getDeleteSubscriptionsUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersDeleteSubscriptionRequest,)
  }
);}




export const getDeleteSubscriptionsMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSubscriptions>>, TError,{data: HandlersDeleteSubscriptionRequest}, TContext>, request?: SecondParameter<typeof deleteSubscriptionsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSubscriptions>>, TError,{data: HandlersDeleteSubscriptionRequest}, TContext> => {
    
const mutationKey = ['deleteSubscriptions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSubscriptions>>, {data: HandlersDeleteSubscriptionRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteSubscriptions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSubscriptionsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSubscriptions>>>
    export type DeleteSubscriptionsMutationBody = HandlersDeleteSubscriptionRequest
    export type DeleteSubscriptionsMutationError = HandlersErrorResponse

    /**
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÂâäÈô§
 */
export const useDeleteSubscriptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSubscriptions>>, TError,{data: HandlersDeleteSubscriptionRequest}, TContext>, request?: SecondParameter<typeof deleteSubscriptionsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSubscriptions>>,
        TError,
        {data: HandlersDeleteSubscriptionRequest},
        TContext
      > => {

      const mutationOptions = getDeleteSubscriptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „É¶„Éº„Ç∂„ÅåÈñãÁ§∫„Åó„Å¶„ÅÑ„Çã„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥‰∏ÄË¶ßÂèñÂæó
 */
export type getSubscriptionsResponse200 = {
  data: HandlersSubscriptionResponse[]
  status: 200
}

export type getSubscriptionsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type getSubscriptionsResponseComposite = getSubscriptionsResponse200 | getSubscriptionsResponse400;
    
export type getSubscriptionsResponse = getSubscriptionsResponseComposite & {
  headers: Headers;
}

export const getGetSubscriptionsUrl = () => {


  

  return `/subscriptions`
}

export const getSubscriptions = async ( options?: RequestInit): Promise<getSubscriptionsResponse> => {
  
  return getSubscriptionsMutator<getSubscriptionsResponse>(getGetSubscriptionsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetSubscriptionsQueryKey = () => {
    return [`/subscriptions`] as const;
    }

    
export const getGetSubscriptionsQueryOptions = <TData = Awaited<ReturnType<typeof getSubscriptions>>, TError = HandlersErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscriptions>>, TError, TData>>, request?: SecondParameter<typeof getSubscriptionsMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSubscriptionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubscriptions>>> = ({ signal }) => getSubscriptions({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSubscriptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSubscriptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getSubscriptions>>>
export type GetSubscriptionsQueryError = HandlersErrorResponse


export function useGetSubscriptions<TData = Awaited<ReturnType<typeof getSubscriptions>>, TError = HandlersErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscriptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptions>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getSubscriptionsMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSubscriptions<TData = Awaited<ReturnType<typeof getSubscriptions>>, TError = HandlersErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscriptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscriptions>>,
          TError,
          Awaited<ReturnType<typeof getSubscriptions>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getSubscriptionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSubscriptions<TData = Awaited<ReturnType<typeof getSubscriptions>>, TError = HandlersErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscriptions>>, TError, TData>>, request?: SecondParameter<typeof getSubscriptionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥‰∏ÄË¶ßÂèñÂæó
 */

export function useGetSubscriptions<TData = Awaited<ReturnType<typeof getSubscriptions>>, TError = HandlersErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscriptions>>, TError, TData>>, request?: SecondParameter<typeof getSubscriptionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSubscriptionsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Êñ∞„Åó„ÅÑ„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åô„Çã
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥‰ΩúÊàê
 */
export type postSubscriptionsResponse200 = {
  data: HandlersSubscriptionResponse
  status: 200
}

export type postSubscriptionsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type postSubscriptionsResponseComposite = postSubscriptionsResponse200 | postSubscriptionsResponse400;
    
export type postSubscriptionsResponse = postSubscriptionsResponseComposite & {
  headers: Headers;
}

export const getPostSubscriptionsUrl = () => {


  

  return `/subscriptions`
}

export const postSubscriptions = async (handlersSubscriptionCreateRequest: HandlersSubscriptionCreateRequest, options?: RequestInit): Promise<postSubscriptionsResponse> => {
  
  return postSubscriptionsMutator<postSubscriptionsResponse>(getPostSubscriptionsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersSubscriptionCreateRequest,)
  }
);}




export const getPostSubscriptionsMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSubscriptions>>, TError,{data: HandlersSubscriptionCreateRequest}, TContext>, request?: SecondParameter<typeof postSubscriptionsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postSubscriptions>>, TError,{data: HandlersSubscriptionCreateRequest}, TContext> => {
    
const mutationKey = ['postSubscriptions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSubscriptions>>, {data: HandlersSubscriptionCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postSubscriptions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSubscriptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postSubscriptions>>>
    export type PostSubscriptionsMutationBody = HandlersSubscriptionCreateRequest
    export type PostSubscriptionsMutationError = HandlersErrorResponse

    /**
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥‰ΩúÊàê
 */
export const usePostSubscriptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSubscriptions>>, TError,{data: HandlersSubscriptionCreateRequest}, TContext>, request?: SecondParameter<typeof postSubscriptionsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSubscriptions>>,
        TError,
        {data: HandlersSubscriptionCreateRequest},
        TContext
      > => {

      const mutationOptions = getPostSubscriptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Êó¢Â≠ò„ÅÆ„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíÊõ¥Êñ∞„Åô„Çã
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Êõ¥Êñ∞
 */
export type putSubscriptionsResponse200 = {
  data: HandlersSubscriptionResponse
  status: 200
}

export type putSubscriptionsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type putSubscriptionsResponseComposite = putSubscriptionsResponse200 | putSubscriptionsResponse400;
    
export type putSubscriptionsResponse = putSubscriptionsResponseComposite & {
  headers: Headers;
}

export const getPutSubscriptionsUrl = () => {


  

  return `/subscriptions`
}

export const putSubscriptions = async (handlersSubscriptionUpdateRequest: HandlersSubscriptionUpdateRequest, options?: RequestInit): Promise<putSubscriptionsResponse> => {
  
  return putSubscriptionsMutator<putSubscriptionsResponse>(getPutSubscriptionsUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersSubscriptionUpdateRequest,)
  }
);}




export const getPutSubscriptionsMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSubscriptions>>, TError,{data: HandlersSubscriptionUpdateRequest}, TContext>, request?: SecondParameter<typeof putSubscriptionsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putSubscriptions>>, TError,{data: HandlersSubscriptionUpdateRequest}, TContext> => {
    
const mutationKey = ['putSubscriptions'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSubscriptions>>, {data: HandlersSubscriptionUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  putSubscriptions(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSubscriptionsMutationResult = NonNullable<Awaited<ReturnType<typeof putSubscriptions>>>
    export type PutSubscriptionsMutationBody = HandlersSubscriptionUpdateRequest
    export type PutSubscriptionsMutationError = HandlersErrorResponse

    /**
 * @summary „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Êõ¥Êñ∞
 */
export const usePutSubscriptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSubscriptions>>, TError,{data: HandlersSubscriptionUpdateRequest}, TContext>, request?: SecondParameter<typeof putSubscriptionsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSubscriptions>>,
        TError,
        {data: HandlersSubscriptionUpdateRequest},
        TContext
      > => {

      const mutationOptions = getPutSubscriptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    