/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  HandlersErrorResponse,
  HandlersUserCreateRequestBody,
  HandlersUserResponse
} from '.././schemas';

import postUsersMutator from '../../../../lib/fetch';
import putUsersMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * clerk„Åß„É¶„Éº„Ç∂Ë™çË®º„Åó„ÅüÂæå„Å´„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆDB„Å´„É¶„Éº„Ç∂„ÇíÁôªÈå≤„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
 * @summary „É¶„Éº„Ç∂ÁôªÈå≤
 */
export type postUsersResponse200 = {
  data: HandlersUserResponse
  status: 200
}

export type postUsersResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type postUsersResponseComposite = postUsersResponse200 | postUsersResponse400;
    
export type postUsersResponse = postUsersResponseComposite & {
  headers: Headers;
}

export const getPostUsersUrl = () => {


  

  return `/users`
}

export const postUsers = async (handlersUserCreateRequestBody: HandlersUserCreateRequestBody, options?: RequestInit): Promise<postUsersResponse> => {
  
  return postUsersMutator<postUsersResponse>(getPostUsersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersUserCreateRequestBody,)
  }
);}




export const getPostUsersMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof postUsersMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext> => {
    
const mutationKey = ['postUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: HandlersUserCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = HandlersUserCreateRequestBody
    export type PostUsersMutationError = HandlersErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂ÁôªÈå≤
 */
export const usePostUsers = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof postUsersMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsers>>,
        TError,
        {data: HandlersUserCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * clerk„Åß„É¶„Éº„Ç∂Ë™çË®º„Åó„ÅüÂæå„Å´„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆDB„Å´„É¶„Éº„Ç∂„ÇíÊõ¥Êñ∞„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
 * @summary „É¶„Éº„Ç∂Êõ¥Êñ∞
 */
export type putUsersResponse200 = {
  data: HandlersUserResponse
  status: 200
}

export type putUsersResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type putUsersResponseComposite = putUsersResponse200 | putUsersResponse400;
    
export type putUsersResponse = putUsersResponseComposite & {
  headers: Headers;
}

export const getPutUsersUrl = () => {


  

  return `/users`
}

export const putUsers = async (handlersUserCreateRequestBody: HandlersUserCreateRequestBody, options?: RequestInit): Promise<putUsersResponse> => {
  
  return putUsersMutator<putUsersResponse>(getPutUsersUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersUserCreateRequestBody,)
  }
);}




export const getPutUsersMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof putUsersMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext> => {
    
const mutationKey = ['putUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsers>>, {data: HandlersUserCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  putUsers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersMutationResult = NonNullable<Awaited<ReturnType<typeof putUsers>>>
    export type PutUsersMutationBody = HandlersUserCreateRequestBody
    export type PutUsersMutationError = HandlersErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂Êõ¥Êñ∞
 */
export const usePutUsers = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof putUsersMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putUsers>>,
        TError,
        {data: HandlersUserCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPutUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    