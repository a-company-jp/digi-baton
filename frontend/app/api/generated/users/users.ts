/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HandlersErrorResponse,
  HandlersUserCreateRequestBody,
  HandlersUserResponse
} from '.././schemas';

import getUsersMutator from '../../../../lib/fetch';
import postUsersMutator from '../../../../lib/fetch';
import putUsersMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * clerkID„Åã„Çâ„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
 * @summary „É¶„Éº„Ç∂„ÉºÂèñÂæó
 */
export type getUsersResponse200 = {
  data: HandlersUserResponse
  status: 200
}
    
export type getUsersResponseComposite = getUsersResponse200;
    
export type getUsersResponse = getUsersResponseComposite & {
  headers: Headers;
}

export const getGetUsersUrl = () => {


  

  return `/users`
}

export const getUsers = async ( options?: RequestInit): Promise<getUsersResponse> => {
  
  return getUsersMutator<getUsersResponse>(getGetUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof getUsersMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = unknown


export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          Awaited<ReturnType<typeof getUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getUsersMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          Awaited<ReturnType<typeof getUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getUsersMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof getUsersMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „É¶„Éº„Ç∂„ÉºÂèñÂæó
 */

export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof getUsersMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * clerk„Åß„É¶„Éº„Ç∂Ë™çË®º„Åó„ÅüÂæå„Å´„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆDB„Å´„É¶„Éº„Ç∂„ÇíÁôªÈå≤„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
 * @summary „É¶„Éº„Ç∂ÁôªÈå≤
 */
export type postUsersResponse200 = {
  data: HandlersUserResponse
  status: 200
}

export type postUsersResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type postUsersResponseComposite = postUsersResponse200 | postUsersResponse400;
    
export type postUsersResponse = postUsersResponseComposite & {
  headers: Headers;
}

export const getPostUsersUrl = () => {


  

  return `/users`
}

export const postUsers = async (handlersUserCreateRequestBody: HandlersUserCreateRequestBody, options?: RequestInit): Promise<postUsersResponse> => {
  
  return postUsersMutator<postUsersResponse>(getPostUsersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersUserCreateRequestBody,)
  }
);}




export const getPostUsersMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof postUsersMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext> => {
    
const mutationKey = ['postUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: HandlersUserCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = HandlersUserCreateRequestBody
    export type PostUsersMutationError = HandlersErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂ÁôªÈå≤
 */
export const usePostUsers = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof postUsersMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postUsers>>,
        TError,
        {data: HandlersUserCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPostUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * clerk„Åß„É¶„Éº„Ç∂Ë™çË®º„Åó„ÅüÂæå„Å´„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆDB„Å´„É¶„Éº„Ç∂„ÇíÊõ¥Êñ∞„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
 * @summary „É¶„Éº„Ç∂Êõ¥Êñ∞
 */
export type putUsersResponse200 = {
  data: HandlersUserResponse
  status: 200
}

export type putUsersResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type putUsersResponseComposite = putUsersResponse200 | putUsersResponse400;
    
export type putUsersResponse = putUsersResponseComposite & {
  headers: Headers;
}

export const getPutUsersUrl = () => {


  

  return `/users`
}

export const putUsers = async (handlersUserCreateRequestBody: HandlersUserCreateRequestBody, options?: RequestInit): Promise<putUsersResponse> => {
  
  return putUsersMutator<putUsersResponse>(getPutUsersUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersUserCreateRequestBody,)
  }
);}




export const getPutUsersMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof putUsersMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext> => {
    
const mutationKey = ['putUsers'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsers>>, {data: HandlersUserCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  putUsers(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUsersMutationResult = NonNullable<Awaited<ReturnType<typeof putUsers>>>
    export type PutUsersMutationBody = HandlersUserCreateRequestBody
    export type PutUsersMutationError = HandlersErrorResponse

    /**
 * @summary „É¶„Éº„Ç∂Êõ¥Êñ∞
 */
export const usePutUsers = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsers>>, TError,{data: HandlersUserCreateRequestBody}, TContext>, request?: SecondParameter<typeof putUsersMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putUsers>>,
        TError,
        {data: HandlersUserCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPutUsersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    