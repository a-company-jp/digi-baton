/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HandlersAccountCreateRequestBody,
  HandlersAccountResponse,
  HandlersDeleteAccountCreateRequest,
  HandlersErrorResponse
} from '.././schemas';

import deleteAccountsMutator from '../../../../lib/fetch';
import getAccountsMutator from '../../../../lib/fetch';
import postAccountsMutator from '../../../../lib/fetch';
import putAccountsMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * „Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂâäÈô§„Åô„Çã
 * @summary „Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export type deleteAccountsResponse200 = {
  data: HandlersAccountResponse
  status: 200
}

export type deleteAccountsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type deleteAccountsResponseComposite = deleteAccountsResponse200 | deleteAccountsResponse400;
    
export type deleteAccountsResponse = deleteAccountsResponseComposite & {
  headers: Headers;
}

export const getDeleteAccountsUrl = () => {


  

  return `/accounts`
}

export const deleteAccounts = async (handlersDeleteAccountCreateRequest: HandlersDeleteAccountCreateRequest, options?: RequestInit): Promise<deleteAccountsResponse> => {
  
  return deleteAccountsMutator<deleteAccountsResponse>(getDeleteAccountsUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersDeleteAccountCreateRequest,)
  }
);}




export const getDeleteAccountsMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAccounts>>, TError,{data: HandlersDeleteAccountCreateRequest}, TContext>, request?: SecondParameter<typeof deleteAccountsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAccounts>>, TError,{data: HandlersDeleteAccountCreateRequest}, TContext> => {
    
const mutationKey = ['deleteAccounts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAccounts>>, {data: HandlersDeleteAccountCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteAccounts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAccounts>>>
    export type DeleteAccountsMutationBody = HandlersDeleteAccountCreateRequest
    export type DeleteAccountsMutationError = HandlersErrorResponse

    /**
 * @summary „Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const useDeleteAccounts = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAccounts>>, TError,{data: HandlersDeleteAccountCreateRequest}, TContext>, request?: SecondParameter<typeof deleteAccountsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAccounts>>,
        TError,
        {data: HandlersDeleteAccountCreateRequest},
        TContext
      > => {

      const mutationOptions = getDeleteAccountsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „É¶„Éº„Ç∂„ÅåÈñãÁ§∫„Åó„Å¶„ÅÑ„Çã„Ç¢„Ç´„Ç¶„É≥„Éà‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà‰∏ÄË¶ßÂèñÂæó
 */
export type getAccountsResponse200 = {
  data: HandlersAccountResponse[]
  status: 200
}

export type getAccountsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type getAccountsResponseComposite = getAccountsResponse200 | getAccountsResponse400;
    
export type getAccountsResponse = getAccountsResponseComposite & {
  headers: Headers;
}

export const getGetAccountsUrl = () => {


  

  return `/accounts`
}

export const getAccounts = async ( options?: RequestInit): Promise<getAccountsResponse> => {
  
  return getAccountsMutator<getAccountsResponse>(getGetAccountsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetAccountsQueryKey = () => {
    return [`/accounts`] as const;
    }

    
export const getGetAccountsQueryOptions = <TData = Awaited<ReturnType<typeof getAccounts>>, TError = HandlersErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>>, request?: SecondParameter<typeof getAccountsMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccountsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccounts>>> = ({ signal }) => getAccounts({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAccountsQueryResult = NonNullable<Awaited<ReturnType<typeof getAccounts>>>
export type GetAccountsQueryError = HandlersErrorResponse


export function useGetAccounts<TData = Awaited<ReturnType<typeof getAccounts>>, TError = HandlersErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccounts>>,
          TError,
          Awaited<ReturnType<typeof getAccounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getAccountsMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccounts<TData = Awaited<ReturnType<typeof getAccounts>>, TError = HandlersErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccounts>>,
          TError,
          Awaited<ReturnType<typeof getAccounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getAccountsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccounts<TData = Awaited<ReturnType<typeof getAccounts>>, TError = HandlersErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>>, request?: SecondParameter<typeof getAccountsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà‰∏ÄË¶ßÂèñÂæó
 */

export function useGetAccounts<TData = Awaited<ReturnType<typeof getAccounts>>, TError = HandlersErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>>, request?: SecondParameter<typeof getAccountsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAccountsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * „Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åô„Çã
 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê
 */
export type postAccountsResponse200 = {
  data: HandlersAccountResponse
  status: 200
}

export type postAccountsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type postAccountsResponseComposite = postAccountsResponse200 | postAccountsResponse400;
    
export type postAccountsResponse = postAccountsResponseComposite & {
  headers: Headers;
}

export const getPostAccountsUrl = () => {


  

  return `/accounts`
}

export const postAccounts = async (handlersAccountCreateRequestBody: HandlersAccountCreateRequestBody, options?: RequestInit): Promise<postAccountsResponse> => {
  
  return postAccountsMutator<postAccountsResponse>(getPostAccountsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersAccountCreateRequestBody,)
  }
);}




export const getPostAccountsMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAccounts>>, TError,{data: HandlersAccountCreateRequestBody}, TContext>, request?: SecondParameter<typeof postAccountsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postAccounts>>, TError,{data: HandlersAccountCreateRequestBody}, TContext> => {
    
const mutationKey = ['postAccounts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAccounts>>, {data: HandlersAccountCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  postAccounts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof postAccounts>>>
    export type PostAccountsMutationBody = HandlersAccountCreateRequestBody
    export type PostAccountsMutationError = HandlersErrorResponse

    /**
 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê
 */
export const usePostAccounts = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAccounts>>, TError,{data: HandlersAccountCreateRequestBody}, TContext>, request?: SecondParameter<typeof postAccountsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAccounts>>,
        TError,
        {data: HandlersAccountCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPostAccountsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÊõ¥Êñ∞„Åô„Çã
 * @summary „Ç¢„Ç´„Ç¶„É≥„ÉàÊõ¥Êñ∞
 */
export type putAccountsResponse200 = {
  data: HandlersAccountResponse
  status: 200
}

export type putAccountsResponse400 = {
  data: HandlersErrorResponse
  status: 400
}
    
export type putAccountsResponseComposite = putAccountsResponse200 | putAccountsResponse400;
    
export type putAccountsResponse = putAccountsResponseComposite & {
  headers: Headers;
}

export const getPutAccountsUrl = () => {


  

  return `/accounts`
}

export const putAccounts = async (handlersAccountCreateRequestBody: HandlersAccountCreateRequestBody, options?: RequestInit): Promise<putAccountsResponse> => {
  
  return putAccountsMutator<putAccountsResponse>(getPutAccountsUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersAccountCreateRequestBody,)
  }
);}




export const getPutAccountsMutationOptions = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAccounts>>, TError,{data: HandlersAccountCreateRequestBody}, TContext>, request?: SecondParameter<typeof putAccountsMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putAccounts>>, TError,{data: HandlersAccountCreateRequestBody}, TContext> => {
    
const mutationKey = ['putAccounts'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAccounts>>, {data: HandlersAccountCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  putAccounts(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAccountsMutationResult = NonNullable<Awaited<ReturnType<typeof putAccounts>>>
    export type PutAccountsMutationBody = HandlersAccountCreateRequestBody
    export type PutAccountsMutationError = HandlersErrorResponse

    /**
 * @summary „Ç¢„Ç´„Ç¶„É≥„ÉàÊõ¥Êñ∞
 */
export const usePutAccounts = <TError = HandlersErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAccounts>>, TError,{data: HandlersAccountCreateRequestBody}, TContext>, request?: SecondParameter<typeof putAccountsMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putAccounts>>,
        TError,
        {data: HandlersAccountCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPutAccountsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    