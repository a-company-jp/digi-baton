/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Digi Baton API
 * OpenAPI spec version: 2.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HandlersDeleteDeviceCreateRequest,
  HandlersDeviceCreateRequestBody,
  HandlersDeviceResponse
} from '.././schemas';

import getDevicesMutator from '../../../../lib/fetch';
import putDevicesMutator from '../../../../lib/fetch';
import postDevicesMutator from '../../../../lib/fetch';
import deleteDevicesMutator from '../../../../lib/fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * „É¶„Éº„Ç∂„ÅåÈñãÁ§∫„Åó„Å¶„ÅÑ„Çã„Éá„Éê„Ç§„Çπ‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
 * @summary „Éá„Éê„Ç§„Çπ‰∏ÄË¶ßÂèñÂæó
 */
export type getDevicesResponse200 = {
  data: HandlersDeviceResponse[]
  status: 200
}
    
export type getDevicesResponseComposite = getDevicesResponse200;
    
export type getDevicesResponse = getDevicesResponseComposite & {
  headers: Headers;
}

export const getGetDevicesUrl = () => {


  

  return `/devices`
}

export const getDevices = async ( options?: RequestInit): Promise<getDevicesResponse> => {
  
  return getDevicesMutator<getDevicesResponse>(getGetDevicesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetDevicesQueryKey = () => {
    return [`/devices`] as const;
    }

    
export const getGetDevicesQueryOptions = <TData = Awaited<ReturnType<typeof getDevices>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevices>>, TError, TData>>, request?: SecondParameter<typeof getDevicesMutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDevicesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDevices>>> = ({ signal }) => getDevices({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDevices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof getDevices>>>
export type GetDevicesQueryError = unknown


export function useGetDevices<TData = Awaited<ReturnType<typeof getDevices>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDevices>>,
          TError,
          Awaited<ReturnType<typeof getDevices>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getDevicesMutator>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDevices<TData = Awaited<ReturnType<typeof getDevices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDevices>>,
          TError,
          Awaited<ReturnType<typeof getDevices>>
        > , 'initialData'
      >, request?: SecondParameter<typeof getDevicesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDevices<TData = Awaited<ReturnType<typeof getDevices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevices>>, TError, TData>>, request?: SecondParameter<typeof getDevicesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary „Éá„Éê„Ç§„Çπ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetDevices<TData = Awaited<ReturnType<typeof getDevices>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevices>>, TError, TData>>, request?: SecondParameter<typeof getDevicesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDevicesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * „Éá„Éê„Ç§„Çπ„ÇíÊõ¥Êñ∞„Åô„Çã
 * @summary „Éá„Éê„Ç§„ÇπÊõ¥Êñ∞
 */
export type putDevicesResponse200 = {
  data: HandlersDeviceResponse
  status: 200
}
    
export type putDevicesResponseComposite = putDevicesResponse200;
    
export type putDevicesResponse = putDevicesResponseComposite & {
  headers: Headers;
}

export const getPutDevicesUrl = () => {


  

  return `/devices`
}

export const putDevices = async (handlersDeviceCreateRequestBody: HandlersDeviceCreateRequestBody, options?: RequestInit): Promise<putDevicesResponse> => {
  
  return putDevicesMutator<putDevicesResponse>(getPutDevicesUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersDeviceCreateRequestBody,)
  }
);}




export const getPutDevicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDevices>>, TError,{data: HandlersDeviceCreateRequestBody}, TContext>, request?: SecondParameter<typeof putDevicesMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof putDevices>>, TError,{data: HandlersDeviceCreateRequestBody}, TContext> => {
    
const mutationKey = ['putDevices'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDevices>>, {data: HandlersDeviceCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  putDevices(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof putDevices>>>
    export type PutDevicesMutationBody = HandlersDeviceCreateRequestBody
    export type PutDevicesMutationError = unknown

    /**
 * @summary „Éá„Éê„Ç§„ÇπÊõ¥Êñ∞
 */
export const usePutDevices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDevices>>, TError,{data: HandlersDeviceCreateRequestBody}, TContext>, request?: SecondParameter<typeof putDevicesMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof putDevices>>,
        TError,
        {data: HandlersDeviceCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPutDevicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „Éá„Éê„Ç§„Çπ„ÇíËøΩÂä†„Åô„Çã
 * @summary „Éá„Éê„Ç§„ÇπËøΩÂä†
 */
export type postDevicesResponse200 = {
  data: HandlersDeviceResponse
  status: 200
}
    
export type postDevicesResponseComposite = postDevicesResponse200;
    
export type postDevicesResponse = postDevicesResponseComposite & {
  headers: Headers;
}

export const getPostDevicesUrl = () => {


  

  return `/devices`
}

export const postDevices = async (handlersDeviceCreateRequestBody: HandlersDeviceCreateRequestBody, options?: RequestInit): Promise<postDevicesResponse> => {
  
  return postDevicesMutator<postDevicesResponse>(getPostDevicesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersDeviceCreateRequestBody,)
  }
);}




export const getPostDevicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDevices>>, TError,{data: HandlersDeviceCreateRequestBody}, TContext>, request?: SecondParameter<typeof postDevicesMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof postDevices>>, TError,{data: HandlersDeviceCreateRequestBody}, TContext> => {
    
const mutationKey = ['postDevices'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDevices>>, {data: HandlersDeviceCreateRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  postDevices(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof postDevices>>>
    export type PostDevicesMutationBody = HandlersDeviceCreateRequestBody
    export type PostDevicesMutationError = unknown

    /**
 * @summary „Éá„Éê„Ç§„ÇπËøΩÂä†
 */
export const usePostDevices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDevices>>, TError,{data: HandlersDeviceCreateRequestBody}, TContext>, request?: SecondParameter<typeof postDevicesMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof postDevices>>,
        TError,
        {data: HandlersDeviceCreateRequestBody},
        TContext
      > => {

      const mutationOptions = getPostDevicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * „Éá„Éê„Ç§„Çπ„ÇíÂâäÈô§„Åô„Çã
 * @summary „Éá„Éê„Ç§„ÇπÂâäÈô§
 */
export type deleteDevicesResponse200 = {
  data: HandlersDeviceResponse
  status: 200
}
    
export type deleteDevicesResponseComposite = deleteDevicesResponse200;
    
export type deleteDevicesResponse = deleteDevicesResponseComposite & {
  headers: Headers;
}

export const getDeleteDevicesUrl = () => {


  

  return `/devices`
}

export const deleteDevices = async (handlersDeleteDeviceCreateRequest: HandlersDeleteDeviceCreateRequest, options?: RequestInit): Promise<deleteDevicesResponse> => {
  
  return deleteDevicesMutator<deleteDevicesResponse>(getDeleteDevicesUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      handlersDeleteDeviceCreateRequest,)
  }
);}




export const getDeleteDevicesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDevices>>, TError,{data: HandlersDeleteDeviceCreateRequest}, TContext>, request?: SecondParameter<typeof deleteDevicesMutator>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDevices>>, TError,{data: HandlersDeleteDeviceCreateRequest}, TContext> => {
    
const mutationKey = ['deleteDevices'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDevices>>, {data: HandlersDeleteDeviceCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  deleteDevices(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDevicesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDevices>>>
    export type DeleteDevicesMutationBody = HandlersDeleteDeviceCreateRequest
    export type DeleteDevicesMutationError = unknown

    /**
 * @summary „Éá„Éê„Ç§„ÇπÂâäÈô§
 */
export const useDeleteDevices = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDevices>>, TError,{data: HandlersDeleteDeviceCreateRequest}, TContext>, request?: SecondParameter<typeof deleteDevicesMutator>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDevices>>,
        TError,
        {data: HandlersDeleteDeviceCreateRequest},
        TContext
      > => {

      const mutationOptions = getDeleteDevicesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    